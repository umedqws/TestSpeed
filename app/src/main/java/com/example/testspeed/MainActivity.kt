package com.example.testspeedimport android.annotation.SuppressLintimport android.os.Bundleimport android.util.Logimport android.view.Viewimport android.webkit.WebSettingsimport android.webkit.WebViewimport android.webkit.WebViewClientimport android.widget.Buttonimport android.widget.TextViewimport androidx.appcompat.app.AppCompatActivityimport kotlinx.coroutines.*class MainActivity : AppCompatActivity() {    companion object {        const val TAG = "MainActivity"    }    private lateinit var webView: WebView    @SuppressLint("MissingInflatedId", "SetJavaScriptEnabled")    override fun onCreate(savedInstanceState: Bundle?) {        super.onCreate(savedInstanceState)        setContentView(R.layout.activity_main)        val buttons = findViewById<Button>(R.id.button)        val webView = findViewById<WebView>(R.id.webView)        webView.settings.javaScriptEnabled = true        onButtonClick(buttons)        webView.loadUrl("https://fast.com")    }    override fun onBackPressed() {        if (webView.canGoBack()) {            webView.goBack()        } else {            super.onBackPressed()        }    }    @SuppressLint("SetJavaScriptEnabled")    private fun onButtonClick(view: View) {        webView.settings.javaScriptEnabled = true        webView.settings.blockNetworkLoads = true      val  webView = WebView(this)      //  webView.settings.mixedContentMode = WebSettings.MIXED_CONTENT_COMPATIBILITY_MODE        webView.webViewClient = object : WebViewClient() {            override fun onPageFinished(view: WebView?, url: String?) {                val downloadSpeed = webView.evaluateJavascript("window.performance.getEntries()[0].responseEnd / 1000000") { result ->                    Log.d("fastt","downloadSpeed: $result")                }                val uploadSpeed = webView.evaluateJavascript("window.performance.getEntries()[1].responseEnd / 1000000") { result ->                    Log.d("fastt","uploadSpeed: $result")                }                val unloadedLatency = webView.evaluateJavascript("(window.performance.timing.responseStart - window.performance.timing.navigationStart)") { result ->                    Log.d("fastt","unloadedLatency: $result")                }                val loadedLatency = webView.evaluateJavascript("(window.performance.timing.loadEventEnd - window.performance.timing.navigationStart)") { result ->                    Log.d("fastt","unloadedLatency: $result")                }            }        }        webView.loadUrl("https://fast.com")        setContentView(webView)    }    }